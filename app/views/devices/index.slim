section#devices_list_section.signup-section.bg-black.text-center
  .container
    .row
      .col-2
      .col-8
        h5.text-white-50
          .notice = notice
          .alert = alert
    .row
      .col-2
      .col-8
        h1.text-white-50 Список устройств
      .col-2
        = link_to 'Добавить', new_device_path, class: 'btn btn-xs btn-success'
    .row
      p
    .row
      .col-12
        table.table.table-dark.hoverTable
          thead
            tr
              / td ID
              td Наименование
              td Подключен?
              / td Описание
              td Местоположение
              td Тип навыка
              / td Производитель
              / td Модель
              / td Версия железа
              / td Версия софта
              td Хост
              td Порт
          tbody
            - @devices.each do |device|
              tr.text-white-50 data-link=edit_device_path(device)
                / td= device.id
                td= device.name
                td= device.enabled
                / td= device.description
                td= device.room
                td= device.device_type
                / td= device.manufacturer
                / td= device.model
                / td= device.hw_version
                / td= device.sw_version
                td= device.host
                td= device.port

section
  .container
    .row
      .col-12.mx-auto
        h5.mb-4
          .text-center.text-white Проброс портов
          .small.text-white-50
            div в настройках маршрутизатора необходимо открыть порт 9292 или сделать проброс порта на любой другой,
            div который потом необходимо указать в настройках устройства
            div При команде Алисе "включи свет на кухне" она отправит запрос в навык PiPiper, а он в свою очередь найдет устройство
            div и отправит на него POST-запрос на указанный хост и порт, по пути "path" указанному в навыке устройства с json-ом
            div
              | { "pin": 17, "status": true } - пин указывается в навыке устройства "pin"
    .row
      .col-6.mx-auto
        h5.mb-4
          .text-center.text-white RUBY
          .small.text-white-50
            div Команда запуска веб сервера puma как демона на стандартном порту 9292
            code rackup -s puma --host 0.0.0.0 config.ru -D
        div
          div.text-white-50 = " ./pin_enabler/Gemfile:"
          code
            = "source 'https://rubygems.org'"
            div = "gem 'ya_gpio'"
        p
          div.text-white-50 = " ./pin_enabler/config.ru:"
          code
            = "require 'ya_gpio'"
            div = "require_relative 'pin_enabler.rb'"
            div = "use Rack::Reloader"
            div = "run PinEnabler.new"
        p
          div.text-white-50 = " ./pin_enabler/pin_enabler.rb:"
          code
            = "class PinEnabler"
            .tab1 = "def call(env)"
            .tab2 = "request_params = Rack::Request.new(env).body.read"
            .tab2 = "puts request_params"
            .tab2 = "resp = case env['REQUEST_URI']"
            .tab4 = "when '/pin'"
            .tab5 = "if env['REQUEST_METHOD'] == 'POST'"
            .tab5 = "params = JSON.parse(request_params)"
            .tab5 = "pin = YaGPIO.new(params['pin'], YaGPIO::OUTPUT)"
            .tab5 = "params['status'] ? pin.high : pin.low"
            .tab5 = "{ pin: params['pin'], status: pin.high? }"
            .tab4 = "end"
            .tab2 = "end"
            .tab2 = "[200, {'Content-Type' => 'application/json'}, [JSON.pretty_generate(resp)]]"
            .tab1 = "end"
            div = "end"
      .col-6.mx-auto
        h5.mb-4
          .text-center.text-white PYTHON
          .small.text-white-50
            div Команда запуска python программы
            code python3 pin_enabler.py
        div
          div.text-white-50 = " ./pin_enabler/pin_enabler.py:\n"
          code
            = "from json import dumps"
            div = "from bottle import route, run, response, request"
            div = "from meinheld import server"
            div = "import RPi.GPIO as GPIO"
            div = "GPIO.setwarnings(False)"
            div = "GPIO.setmode(GPIO.BCM)"
            div = "@route('/pin', method='POST')"
            div = "def index():"
            .tab2 = "response.content_type = 'application/json'"
            .tab2 = "json = request.json"
            .tab2 = "print(json)"
            .tab2 = "pin = json.get('pin')"
            .tab2 = "status = json.get('status')"
            .tab2 = "GPIO.setup(pin, GPIO.OUT)"
            .tab2 = "GPIO.output(pin, GPIO.HIGH if status else GPIO.LOW)"
            .tab2 = "resp = { 'pin': pin, 'status': status }"
            .tab2 = "return dumps(resp)"
            div = "run(server='meinheld', host='0.0.0.0', port=9292, reloader=True)"

javascript:
    $("tr[data-link]").click(function () {
        window.location = $(this).data("link")
    })
